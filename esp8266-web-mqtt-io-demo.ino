// In arduino Additional Board Manager add http://arduino.esp8266.com/stable/package_esp8266com_index.json
// For more info see https://github.com/esp8266/Arduino

#include <ESP8266WiFi.h> 
#include <WiFiManager.h> // https://github.com/tzapu/WiFiManager (WiFiManager-0.12.0 from Arduino IDE Libraries)
#include <DNSServer.h> 
#include <ESP8266WebServer.h> 
#include <Base64.h> 
#include <OneWire.h> // http://www.pjrc.com/teensy/td_libs_OneWire.html (OneWire-2.3.2 from Arduino IDE Libraries)
#include <DallasTemperature.h> // https://github.com/milesburton/Arduino-Temperature-Control-Library (DallasTemperature-3.7.6 from Arduino IDE Libraries)
#include <FS.h> 
#include <PubSubClient.h> // http://pubsubclient.knolleary.net/ (PubSubClient-2.6.0 from Arduino IDE Libraries)

// Pins to name mapping
// If you have your I/O connected to other pins, modify these accordingly
#define LED_R D0 // An RGB led connected with a resistor (3 resistors, one for each color) 
#define LED_G D1 // An RGB led connected with a resistor (3 resistors, one for each color) 
#define LED_B D2 // An RGB led connected with a resistor (3 resistors, one for each color) 
#define TEMPERATURE_SENSOR D5 // A DS18B20 temperature sensor connected with a pull-up resistor
#define INTERNAL_LED D4 // In the NodeMCU v1.0 ESP8266 12-E the internal led is connected to D4
#define RELAY_1 D6 // 2-way (I0) relay connected to the ESP8266 pins, the relay is also connected to 3.3v and GND
#define RELAY_2 D7 // 2-way (I1) relay connected to the ESP8266 pins, the relay is also connected to 3.3v and GND
#define TOGGLE_BUTTON D8 // A simple button (not a switch) connected with a pull-down resistor

// Adafruit IO configuration. Replace {user} and {key} with your own
#define AIO_SERVER "io.adafruit.com"
#define AIO_SERVERPORT 1883
#define AIO_USERNAME "{user}"
#define AIO_KEY "{key}"

// Adafruit IO feeds (they are autogenerated using the device id)
// Example for the temp: AIO_BASE_FEED + ESP.getChipId() + AIO_TEMP_FEED =>
// {username}/feeds/CC44DD-temp. No need to change these.
#define AIO_BASE_FEED AIO_USERNAME "/feeds/"
#define AIO_TOGGLE_BUTTON_FEED "-toggle-button"
#define AIO_TOGGLE_BUTTON_STATE_FEED "-toggle-button-state"
#define AIO_RGB_FEED "-led-rgb"
#define AIO_RELAY1_FEED "-relay1"
#define AIO_RELAY2_FEED "-relay2"
#define AIO_TEMP_FEED "-temp"

// Amount of values skipped when cycling led rgb colors
#define COLOR_STEP 25

// Amount degrees that the temperature could change without considering it an actual change
#define TEMPERATURE_THRESHOLD 0.2

// Serial speed for the console
# define SERIAL_SPEED 115200

// MQTT connection
WiFiClient espClient;
PubSubClient client(espClient);

// MQTT Feeds as string
String toogleButtonFeed;
String toogleButtonStateFeed;
String rgbFeed;
String relay1Feed;
String relay2Feed;
String tempFeed;

// Web server
ESP8266WebServer server(80);

// Temperature sensor
OneWire oneWire(TEMPERATURE_SENSOR);
DallasTemperature DS18B20( & oneWire);

// Global state
int lastR = 0;
int lastG = 0;
int lastB = 0;
int lastRelay1 = 0;
int lastRelay2 = 0;
float lastTemp = -200;
float lastTempPublished = -201;
int lastToggleButton = 0;
int lastToggleButtonPublished = 1;
int oldToggleButton = 0;
int cycleColors = 0;
int countR = 0;
int countG = 0;
int countB = 0;
long lastMsg = 0;
char chipId[6];

void setRgb(int r, int g, int b, bool publish) {
    if (r < 0) r = 0;
    if (g < 0) g = 0;
    if (b < 0) b = 0;
    if (r > 1023) r = 1023;
    if (g > 1023) g = 1023;
    if (b > 1023) b = 1023;

    analogWrite(LED_R, r);
    analogWrite(LED_G, g);
    analogWrite(LED_B, b);

    lastR = r;
    lastG = g;
    lastB = b;

    Serial.print("New RGB: ");
    Serial.print(r);
    Serial.print(",");
    Serial.print(g);
    Serial.print(",");
    Serial.println(b);

    if (publish) {
        publishRgb();
    }
}

void publishRgb(void) {
    char colorChar[7];
    sprintf(colorChar, "#%02X%02X%02X", lastR / 4, lastG / 4, lastB / 4);
    client.publish(rgbFeed.c_str(), colorChar);

    Serial.print("Publish message [");
    Serial.print(rgbFeed);
    Serial.print("]: ");
    Serial.println(colorChar);
}

void setRelay1High(bool publish) {
    digitalWrite(RELAY_1, HIGH);

    lastRelay1 = 1;

    Serial.println("Relay 1: HIGH");

    if (publish) {
        publishRelay1();
    }
}

void setRelay1Low(bool publish) {
    digitalWrite(RELAY_1, LOW);

    lastRelay1 = 0;

    Serial.println("Relay 1: LOW");

    if (publish) {
        publishRelay1();
    }
}

void setRelay2High(bool publish) {
    digitalWrite(RELAY_2, HIGH);

    lastRelay2 = 1;

    Serial.println("Relay 2: HIGH");

    if (publish) {
        publishRelay2();
    }
}

void setRelay2Low(bool publish) {
    digitalWrite(RELAY_2, LOW);

    lastRelay2 = 0;

    Serial.println("Relay 2: LOW");

    if (publish) {
        publishRelay2();
    }
}

void publishRelay1(void) {
    String lastRelay1String;
    lastRelay1String += lastRelay1;

    client.publish(relay1Feed.c_str(), lastRelay1String.c_str());

    Serial.print("Publish message [");
    Serial.print(relay1Feed);
    Serial.print("]: ");
    Serial.println(lastRelay1String);
}

void publishRelay2(void) {
    String lastRelay2String;
    lastRelay2String += lastRelay2;

    client.publish(relay2Feed.c_str(), lastRelay2String.c_str());

    Serial.print("Publish message [");
    Serial.print(relay2Feed);
    Serial.print("]: ");
    Serial.println(lastRelay2String);
}

void cycleColorsAction(void) {
    countR = countG = countB = 0;
    cycleColors = 1;
}

void handleTempSensor(void) {
    float temp;
    do {
        DS18B20.requestTemperatures();
        temp = DS18B20.getTempCByIndex(0);
        if (temp > lastTemp + TEMPERATURE_THRESHOLD || temp < lastTemp - TEMPERATURE_THRESHOLD) {
            lastTemp = temp;

            Serial.print("Temperature: ");
            Serial.println(lastTemp);
        }
    } while (temp == 85.0 || temp == (-127.0));
}

void handleCycleColors(void) {
    if (cycleColors == 1) {
        countR += COLOR_STEP;
        if (countR > 1023) {
            countR = 1023;
            countG += COLOR_STEP;
            if (countG > 1023) {
                countG = 1023;
                countB += COLOR_STEP;
                if (countB > 1023) {
                    countR = countG = countB = 0;
                }
            }
        }

        setRgb(countR, countG, countB, false);
    }
}

void publishToggleButton(void) {
    String lastToggleButtonString;
    lastToggleButtonString += lastToggleButton;
    
    client.publish(toogleButtonStateFeed.c_str(), lastToggleButtonString.c_str());

    Serial.print("Publish message [");
    Serial.print(toogleButtonStateFeed);
    Serial.print("]: ");
    Serial.println(lastToggleButtonString);
}

void processToggleButton(void) {
    if (lastToggleButton == 0) {
        processToggleButtonWithState(1);
    } else {
        processToggleButtonWithState(0);
    }
}

void processToggleButtonWithState(int state) {
    lastToggleButton = state;

    digitalWrite(INTERNAL_LED, lastToggleButton);

    publishToggleButton();

    Serial.println("Toogle Button: 1");
}

void handleToggleButton(void) {
    int toggleButton = digitalRead(TOGGLE_BUTTON);
    if (toggleButton && !oldToggleButton) {
        processToggleButton();
        oldToggleButton = 1;
    } else if (!toggleButton && oldToggleButton) {
        oldToggleButton = 0;
    }
}

String getContentType(String filename) {
    if (server.hasArg("download"))
        return "application/octet-stream";
    else if (filename.endsWith(".htm"))
        return "text/html";
    else if (filename.endsWith(".html"))
        return "text/html";
    else if (filename.endsWith(".css"))
        return "text/css";
    else if (filename.endsWith(".js"))
        return "application/javascript";
    else if (filename.endsWith(".png"))
        return "image/png";
    else if (filename.endsWith(".gif"))
        return "image/gif";
    else if (filename.endsWith(".jpg"))
        return "image/jpeg";
    else if (filename.endsWith(".ico"))
        return "image/x-icon";
    else if (filename.endsWith(".xml"))
        return "text/xml";
    else if (filename.endsWith(".pdf"))
        return "application/x-pdf";
    else if (filename.endsWith(".zip"))
        return "application/x-zip";
    else if (filename.endsWith(".gz"))
        return "application/x-gzip";
    else if (filename.endsWith(".svg"))
        return "image/svg+xml";

    return "text/plain";
}

bool handleFileRead(String path) {
    Serial.println("handleFileRead: " + path);
    if (path.endsWith("/")) path += "index.min.html";

    String contentType = getContentType(path);

    String pathWithGz = path + ".gz";

    if (SPIFFS.exists(pathWithGz) || SPIFFS.exists(path)) {
        if (SPIFFS.exists(pathWithGz)) path += ".gz";
        File file = SPIFFS.open(path, "r");
        size_t sent = server.streamFile(file, contentType);
        file.close();
        return true;
    }

    return false;
}

void returnActionValue(void( * action)(bool), bool value) {
    action(value);
    server.send(200, "application/json", "true");
}

void returnAction(void( * action)()) {
    action();
    server.send(200, "application/json", "true");
}

void mqttCallback(char * topicChar, byte * payloadBytes, unsigned int length) {
    char payloadChar[100];
    int i;
    for (i = 0; i < length; i++) {
        payloadChar[i] = payloadBytes[i];
    }
    payloadChar[i] = '\0';

    String topic = String(topicChar);
    String payload = String(payloadChar);

    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("] (");
    Serial.print(length);
    Serial.print(" bytes) :");
    Serial.print(payload);
    Serial.println();

    if (topic == toogleButtonFeed) {
        Serial.print("Processing ");
        Serial.println(toogleButtonFeed);

        if ((char) payload[0] == '1') {
            processToggleButton();
        }
    } else if (topic == toogleButtonStateFeed) {
        Serial.print("Processing ");
        Serial.println(toogleButtonStateFeed);

        int value = atoi(payload.c_str());
        if (value != lastToggleButton) {
            processToggleButtonWithState(value);
        }
    } else if (topic == relay1Feed) {
        Serial.print("Processing ");
        Serial.println(relay1Feed);

        if ((char) payload[0] == '0') {
            setRelay1Low(false);
        } else {
            setRelay1High(false);
        }
    } else if (topic == relay2Feed) {
        Serial.print("Processing ");
        Serial.println(relay2Feed);

        if ((char) payload[0] == '0') {
            setRelay2Low(false);
        } else {
            setRelay2High(false);
        }
    } else if (topic == rgbFeed) {
        Serial.print("Processing ");
        Serial.println(rgbFeed);

        long number = strtol( & payload[1], NULL, 16);
        long r = (number >> 16) * 4;
        long g = (number >> 8 & 0xFF) * 4;
        long b = (number & 0xFF) * 4;

        if (r == 1020) r = 1023;
        if (g == 1020) g = 1023;
        if (b == 1020) b = 1023;

        setRgb(r, g, b, false);
    }
}

String setFeedId(const char * base, char * id, const char * feed) {
    String feedId;
    feedId += base;
    feedId += id;
    feedId += feed;

    return feedId;
}

void setupFeedIds(void) {
    toogleButtonFeed = setFeedId(AIO_BASE_FEED, chipId, AIO_TOGGLE_BUTTON_FEED);
    toogleButtonStateFeed = setFeedId(AIO_BASE_FEED, chipId, AIO_TOGGLE_BUTTON_STATE_FEED);
    rgbFeed = setFeedId(AIO_BASE_FEED, chipId, AIO_RGB_FEED);
    relay1Feed = setFeedId(AIO_BASE_FEED, chipId, AIO_RELAY1_FEED);
    relay2Feed = setFeedId(AIO_BASE_FEED, chipId, AIO_RELAY2_FEED);
    tempFeed = setFeedId(AIO_BASE_FEED, chipId, AIO_TEMP_FEED);
}

void handleMqttConnection(void) {
    // Loop until we're reconnected
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        // Attempt to connect
        if (client.connect(chipId, AIO_USERNAME, AIO_KEY)) {
            Serial.println("connected");
            // Publish current state
            publishRgb();
            publishRelay1();
            publishRelay2();
            publishToggleButton();
            // Resubscribe
            client.subscribe(toogleButtonFeed.c_str());
            client.subscribe(toogleButtonStateFeed.c_str());
            client.subscribe(relay1Feed.c_str());
            client.subscribe(relay2Feed.c_str());
            client.subscribe(rgbFeed.c_str());
        } else {
            Serial.print("failed, ClientState=");
            Serial.print(client.state());
            Serial.println(" trying again in 5000 milliseconds");
            // Wait 5 seconds before retrying but continue handling we requests
            long retryMillis = millis() + 5000;
            while (millis() < retryMillis) {
                // Keep processing local server calls in the meantime
                server.handleClient();
            }
        }
    }
    client.loop();
}

void setup(void) {
    // Init serial
    Serial.begin(SERIAL_SPEED);
    sprintf(chipId, "%06X", ESP.getChipId());
    Serial.println("");
    Serial.print("----- ESP ID=");
    Serial.print(chipId);
    Serial.println(" -----");

    // Setup pins
    pinMode(INTERNAL_LED, OUTPUT);
    pinMode(RELAY_1, OUTPUT);
    pinMode(RELAY_2, OUTPUT);
    pinMode(TOGGLE_BUTTON, INPUT);

    // Set initial state
    digitalWrite(INTERNAL_LED, lastToggleButton);
    setRgb(lastR, lastG, lastB, false);

    // Connect to WiFi / AP
    WiFiManager wifiManager;
    wifiManager.autoConnect();

    // Setup MQTT
    setupFeedIds();
    client.setServer(AIO_SERVER, AIO_SERVERPORT);
    client.setCallback(mqttCallback);

    // Setup file system
    SPIFFS.begin();

    // Setup chip id
    if (!SPIFFS.exists("/id.json")) {
        File idFile = SPIFFS.open("/id.json", "w");
        if (!idFile) {
            Serial.println("id.json file failed to open");
        }
        idFile.println(chipId);
        idFile.close();
    }

    // Set up HTTP server handles
    server.on("/setRelay1High", []() {
        returnActionValue(setRelay1High, true);
    });
    server.on("/setRelay1Low", []() {
        returnActionValue(setRelay1Low, true);
    });
    server.on("/setRelay2High", []() {
        returnActionValue(setRelay2High, true);
    });
    server.on("/setRelay2Low", []() {
        returnActionValue(setRelay2Low, true);
    });
    server.on("/cycleColors", []() {
        returnAction(cycleColorsAction);
    });
    server.on("/setId", []() {
        File idFile = SPIFFS.open("/id.json", "w");
        if (!idFile) {
            Serial.println("id.json file failed to open");
            server.send(500, "application/json", "false");
        } else {
            idFile.println(server.arg("id"));
            server.send(200, "application/json", "true");
        }
        idFile.close();
    });
    server.on("/setRgb", []() {
        int r = atoi(server.arg("r").c_str());
        int g = atoi(server.arg("g").c_str());
        int b = atoi(server.arg("b").c_str());
        setRgb(r, g, b, true);
        cycleColors = 0;
        server.send(200, "application/json", "true");
    });
    server.on("/getRgb", []() {
        char b1[1];
        String rgb = "{ \"r\": ";
        rgb += lastR;
        rgb += ", \"g\": ";
        rgb += lastG;
        rgb += ", \"b\": ";
        rgb += lastB;
        rgb += " }";
        server.send(200, "application/json", rgb);
    });
    server.on("/getToggleButton", []() {
        String buttonAsString;
        buttonAsString += lastToggleButton;
        server.send(200, "application/json", buttonAsString);
    });
    server.on("/getTemp", []() {
        String tempAsString;
        tempAsString += lastTemp;
        server.send(200, "application/json", tempAsString);
    });
    server.on("/getRelay1", []() {
        String relay1AsString;
        relay1AsString += lastRelay1;
        server.send(200, "application/json", relay1AsString);
    });
    server.on("/getRelay2", []() {
        String relay2AsString;
        relay2AsString += lastRelay2;
        server.send(200, "application/json", relay2AsString);
    });

    server.onNotFound([]() {
        if (!handleFileRead(server.uri())) {
            server.send(404, "text/plain", "FileNotFound");
        }
    });

    // Start HTTP server
    server.begin();
    Serial.println("HTTP server started");
}

void loop(void) {
    handleMqttConnection();
    handleTempSensor();
    handleCycleColors();
    handleToggleButton();
    server.handleClient();

    long now = millis();
    if (now - lastMsg > 1200) {
        lastMsg = now;
        if (lastTemp != lastTempPublished) {
            lastTempPublished = lastTemp;
            Serial.print("Publish message [");
            Serial.print(tempFeed);
            Serial.print("]: ");
            String lastTempPublishedString;
            lastTempPublishedString += lastTempPublished;
            Serial.println(lastTempPublishedString);
            client.publish(tempFeed.c_str(), lastTempPublishedString.c_str());
        }
    }
}
